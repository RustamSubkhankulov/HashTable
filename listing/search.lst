     1                                  ;================================================
     2                                  
     3                                  section .text
     4                                  
     5                                  ;================================================
     6                                  
     7                                  global list_search_asm
     8                                  
     9                                  extern srtcmp
    10                                  
    11                                  ;================================================
    12                                  
    13                                  ; rax, rcx, rdx, rsi, rdi, r8, r9, r10, r11
    14                                  
    15                                  ; entry: rdi = list
    16                                  ;        rsi = elem
    17                                  
    18                                  list_search_asm:
    19                                  
    20 00000000 4154                            push r12
    21                                  
    22 00000002 4883FF00                        cmp rdi, 0                      ; if list == NULL
    23 00000006 7508                            jne .skip1                      ; return -1;
    24                                  
    25 00000008 48C7C0FFFFFFFF                  mov rax, -1
    26 0000000F C3                              ret
    27                                  
    28                                      .skip1:
    29 00000010 66837F3000                      cmp word [rdi + 48], 0          ; if size of list is 0
    30 00000015 7450                            je .ret_not_found               ; then return -2;
    31                                  
    32 00000017 448B6730                        mov   r12d, dword [rdi + 48]    ; max ct = list->size
    33 0000001B 4C0FB74718                      movzx r8,    word [rdi + 24]    ; r8 = list->head = cur_index
    34                                  
    35 00000020 4531C9                          xor r9d, r9d                    ; counter
    36                                  
    37                                      .loop:
    38 00000023 4539E1                          cmp r9d, r12d                   ; if ct >= max ct
    39 00000026 7D3F                            jge .ret_not_found              ; stop
    40                                  
    41 00000028 41FFC1                          inc r9d                         ; inc ct
    42                                  
    43 0000002B 4989F2                          mov r10, rsi                    ; r10 = const char* elem
    44                                  
    45 0000002E 4C8B1F                          mov r11, [rdi]                  
    46 00000031 4F8B1CC3                        mov r11, [r11 + 8 * r8]         ; r11 = const char* data
    47                                  
    48 00000035 48C7C0F0FFFFFF                  mov rax, -16
    49                                  
    50                                      .compare_loop:
    51 0000003C 4883C010                        add rax, 16
    52                                  
    53 00000040 F3410F6F0C02                    movdqu xmm1, [r10 + rax]
    54 00000046 F3410F6F1403                    movdqu xmm2, [r11 + rax]
    55                                  
    56 0000004C 660F3A63CA18                    pcmpistri xmm1, xmm2, 00011000b
    57                                      ; mask = 00011000b =  _SIDD_UBYTE_OPS         | 
    58                                                          ; _SIDD_CMP_EQUAL_EACH    |
    59                                                          ; _SIDD_NEGATIVE_POLARITY
    60                                  
    61 00000052 77E8                            jnbe .compare_loop
    62 00000054 730B                            jnc  .ret_found
    63                                  
    64                                      ;strings are not equal
    65 00000056 4C8B5708                        mov   r10,      [rdi + 8]       ; r10 = list->next
    66 0000005A 4F0FB70482                      movzx r8 , word [r10 + 4 * r8]  ; r8 = list->next[cur_index]
    67 0000005F EBC2                            jmp .loop
    68                                  
    69                                      .ret_found:
    70 00000061 4C89C0                          mov rax, r8
    71 00000064 415C                            pop r12
    72 00000066 C3                              ret 
    73                                  
    74                                      .ret_not_found:
    75 00000067 48C7C0FEFFFFFF                  mov rax, -2
    76 0000006E 415C                            pop r12
    77 00000070 C3                              ret 
    78                                  
    79                                      ; .strcmp_loop:
    80                                      ;     mov byte dl, [r10]
    81                                      ;     mov byte al, [r11]              ; load values
    82                                  
    83                                      ;     inc r10
    84                                      ;     inc r11                         ; to next symb
    85                                  
    86                                      ;     cmp dl, 0                       ; if first reached end
    87                                      ;     je .strcmp_stop                 ; jmp to check 2nd
    88                                  
    89                                      ;     cmp dl, al                      ; compare bytes
    90                                      ;     je .strcmp_loop                 ; if equal, repeat
    91                                  
    92                                      ;     jmp .next_iter                  ; else next iteration of compare
    93                                  
    94                                      ; .strcmp_stop:               
    95                                      ;     cmp al ,0                       ; if 2nd is not equal 1st
    96                                      ;     je .ret_found                   ; iterate to next compare
    97                                  
    98                                      ; .next_iter:
    99                                      ;     mov   r10,      [rdi + 8]       ; r10 = list->next
   100                                      ;     movzx r8 , word [r10 + 4 * r8]  ; r8 = list->next[cur_index]
   101                                  
   102                                      ;     jmp .loop
   103                                      ; .ret_found:
   104                                      ;     mov rax, r8
   105                                      ;     ret 
   106                                      
   107                                      ; .ret_not_found:
   108                                      ;     mov rax, -2
   109                                      ;     ret 
   110                                  
   111                                  ;---------------------------------------------------
   112                                  
   113                                      ;     cmp rdi, 0                      ; if list == NULL
   114                                      ;     jne .skip1                      ; return -1;
   115                                  
   116                                      ;     mov rax, -1
   117                                      ;     ret
   118                                  
   119                                      ; .skip1:
   120                                      ;     cmp word [rdi + 48], 0          ; if size of list is 0
   121                                      ;     je .ret_not_found               ; then return -2;
   122                                  
   123                                      ;     movzx rcx, word [rdi + 48]      ; max ct = list->size
   124                                      ;     movzx r8 , word [rdi + 24]      ; r8 = list->head = cur_index
   125                                  
   126                                      ;     xor r9, r9                      ; counter
   127                                  
   128                                      ; .loop:
   129                                      ;     cmp r9, rcx                     ; if ct >= max ct
   130                                      ;     jge .ret_not_found              ; stop
   131                                  
   132                                      ;     inc r9                          ; inc ct
   133                                  
   134                                      ;     mov r10, rsi                    ; r10 = const char* elem
   135                                  
   136                                      ;     mov r11, [rdi]
   137                                      ;     mov r11, [r11 + 8 * r8]         ; r11 = const char* data
   138                                  
   139                                      ; .strcmp_loop:
   140                                      ;     mov byte dl, [r10]
   141                                      ;     mov byte al, [r11]              ; load values
   142                                  
   143                                      ;     inc r10
   144                                      ;     inc r11                         ; to next symb
   145                                  
   146                                      ;     cmp dl, 0                       ; if first reached end
   147                                      ;     je .strcmp_stop                 ; jmp to check 2nd
   148                                  
   149                                      ;     cmp dl, al                      ; compare bytes
   150                                      ;     je .strcmp_loop                 ; if equal, repeat
   151                                  
   152                                      ;     jmp .next_iter                  ; else next iteration of compare
   153                                  
   154                                      ; .strcmp_stop:               
   155                                      ;     cmp al ,0                       ; if 2nd is not equal 1st
   156                                      ;     je .ret_found                   ; iterate to next compare
   157                                  
   158                                      ; .next_iter:
   159                                      ;     mov   r10,      [rdi + 8]       ; r10 = list->next
   160                                      ;     movzx r8 , word [r10 + 4 * r8]  ; r8 = list->next[cur_index]
   161                                  
   162                                      ;     jmp .loop
   163                                      ; .ret_found:
   164                                      ;     mov rax, r8
   165                                      ;     ret 
   166                                      
   167                                      ; .ret_not_found:
   168                                      ;     mov rax, -2
   169                                      ;     ret 
   170                                  
   171                                  ;================================================ 
