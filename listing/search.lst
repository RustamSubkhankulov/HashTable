     1                                  ;================================================
     2                                  
     3                                  section .text
     4                                  
     5                                  ;================================================
     6                                  
     7                                  global list_search_asm
     8                                  
     9                                  extern srtcmp
    10                                  
    11                                  ;================================================
    12                                  
    13                                  ; rax, rcx, rdx, rsi, rdi, r8, r9, r10, r11
    14                                  
    15                                  ; entry: rdi = list
    16                                  ;        rsi = elem
    17                                  
    18                                  list_search_asm:
    19                                  
    20 00000000 4883FF00                        cmp rdi, 0                      ; if list == NULL
    21 00000004 7508                            jne .skip1                      ; return -1;
    22                                  
    23 00000006 48C7C0FFFFFFFF                  mov rax, -1
    24 0000000D C3                              ret
    25                                  
    26                                      .skip1:
    27 0000000E 66837F3000                      cmp word [rdi + 48], 0          ; if size of list is 0
    28 00000013 7449                            je .ret_not_found               ; then return -2;
    29                                  
    30 00000015 480FB74F30                      movzx rcx, word [rdi + 48]      ; max ct = list->size
    31 0000001A 4C0FB74718                      movzx r8 , word [rdi + 24]      ; r8 = list->head = cur_index
    32                                  
    33 0000001F 4D31C9                          xor r9, r9                      ; counter
    34                                  
    35                                      .loop:
    36 00000022 4939C9                          cmp r9, rcx                     ; if ct >= max ct
    37 00000025 7D37                            jge .ret_not_found              ; stop
    38                                  
    39 00000027 49FFC1                          inc r9                          ; inc ct
    40                                  
    41 0000002A 4989F2                          mov r10, rsi                    ; r10 = const char* elem
    42                                  
    43 0000002D 4C8B1F                          mov r11, [rdi]
    44 00000030 4F8B1CC3                        mov r11, [r11 + 8 * r8]         ; r11 = const char* data
    45                                  
    46                                      .strcmp_loop:
    47 00000034 418A12                          mov byte dl, [r10]
    48 00000037 418A03                          mov byte al, [r11]              ; load values
    49                                  
    50 0000003A 49FFC2                          inc r10
    51 0000003D 49FFC3                          inc r11                         ; to next symb
    52                                  
    53 00000040 80FA00                          cmp dl, 0                       ; if first reached end
    54 00000043 7406                            je .strcmp_stop                 ; jmp to check 2nd
    55                                  
    56 00000045 38C2                            cmp dl, al                      ; compare bytes
    57 00000047 74EB                            je .strcmp_loop                 ; if equal, repeat
    58                                  
    59 00000049 EB04                            jmp .next_iter                  ; else next iteration of compare
    60                                  
    61                                      .strcmp_stop:               
    62 0000004B 3C00                            cmp al ,0                       ; if 2nd is not equal 1st
    63 0000004D 740B                            je .ret_found                   ; iterate to next compare
    64                                  
    65                                      .next_iter:
    66 0000004F 4C8B5708                        mov   r10,      [rdi + 8]       ; r10 = list->next
    67 00000053 4F0FB70482                      movzx r8 , word [r10 + 4 * r8]  ; r8 = list->next[cur_index]
    68                                  
    69 00000058 EBC8                            jmp .loop
    70                                      .ret_found:
    71 0000005A 4C89C0                          mov rax, r8
    72 0000005D C3                              ret 
    73                                      
    74                                      .ret_not_found:
    75 0000005E 48C7C0FEFFFFFF                  mov rax, -2
    76 00000065 C3                              ret 
    77                                  
    78                                  ;================================================ 
