     1                                  ;================================================
     2                                  
     3                                  section .text
     4                                  
     5                                  ;================================================
     6                                  
     7                                  global my_hash
     8                                  
     9                                  ;================================================
    10                                  
    11                                  ; rax, rcx, rdx, rsi, rdi, r8, r9, r10, r11
    12                                  
    13                                  ; entry: rdi = data
    14                                  ;        rsi = size
    15                                  
    16                                  my_hash:
    17                                  
    18                                      ;     mov eax, 0xFFFFFFFF
    19                                  
    20                                      ;     cmp esi, 0
    21                                      ;     je .ret
    22                                  
    23                                      ;     mov r11d, esi
    24                                      ;     shr r11d, 2
    25                                  
    26                                      ; .crc32loop:
    27                                      ;     cmp r11d, 0
    28                                      ;     je .crc16
    29                                  
    30                                      ;     ;
    31                                      ;     ;xor r10, r10
    32                                      ;     ;
    33                                      ;     mov r10d, dword [rdi]
    34                                      ;     crc32 eax, r10d
    35                                      ;     add rdi, 4
    36                                      ;     dec r11d
    37                                  
    38                                      ; .crc16:
    39                                      ;     mov r11d, esi
    40                                      ;     and r11d, 2
    41                                      ;     jz .crc8
    42                                  
    43                                      ;     movzx r10d, word [rdi]
    44                                      ;     crc32 eax, r10d
    45                                      ;     add rdi, 2
    46                                  
    47                                      ; .crc8:
    48                                      ;     and esi, 1
    49                                      ;     jz .ret
    50                                  
    51                                      ;     movzx r10d, byte [rdi]
    52                                      ;     crc32 eax, r10d
    53                                  
    54                                      ; .ret:
    55                                      ;     not eax
    56                                      ;     ret 
    57                                  
    58                                  ;------------------------------------------------
    59                                  
    60                                      ;     mov eax, 0FFFFFFFFh             ; start value of crc
    61                                      ;     xor rcx, rcx                    ; counter for data
    62                                  
    63                                      ; .loop:
    64                                      ;     cmp esi, 0                      ; while size != 0
    65                                      ;     je .ret
    66                                      ;     dec esi 
    67                                  
    68                                      ;     mov r9d, eax                    ; 
    69                                      ;     shr r9d, 8                      ; crc >> 8
    70                                  
    71                                      ;     mov edx, eax                    ; lower byte crc
    72                                      ;     ;and rdx, byte [crc32_look_up + 4 * rcx]
    73                                      ;                                     ; rdx = rdx ^ *(data)
    74                                      ;     movzx eax, byte [rdi + rcx]
    75                                      ;     inc rcx                         ; data++
    76                                  
    77                                      ;     xor eax, edx
    78                                      ;     and eax, 0xFF
    79                                      ;     mov eax, [crc32_look_up + 4 * eax]
    80                                      ;                                     ; value form crc look up table        
    81                                          
    82                                      ;     xor eax, r9d
    83                                      ;     jmp .loop
    84                                  
    85                                      ; .ret:
    86                                      ;     not rax 
    87                                      ;     ret 
    88                                  
    89                                  ;------------------------------------------------
    90                                  
    91 00000000 B8FFFFFFFF                      mov eax, 0FFFFFFFFh             ; start value of crc
    92 00000005 4831C9                          xor rcx, rcx                    ; counter for data
    93                                  
    94                                      .loop:
    95 00000008 83FE00                          cmp esi, 0                      ; while size != 0
    96 0000000B 7412                            je .ret
    97 0000000D FFCE                            dec esi 
    98                                  
    99 0000000F 440FB6140F                      movzx r10d, byte [rdi + rcx]
   100 00000014 48FFC1                          inc rcx 
   101                                  
   102 00000017 F2410F38F0C2                    crc32 eax, r10b
   103 0000001D EBE9                            jmp .loop
   104                                  
   105                                      .ret:
   106 0000001F F7D0                            not eax 
   107 00000021 C3                              ret 
   108                                  
   109                                  
   110                                  ;================================================
   111                                  
   112                                  ; ZIX_API uint32_t
   113                                  ; zix_digest_add(uint32_t hash, const void* const buf, const size_t len)
   114                                  ; {
   115                                  ; 	const uint8_t* str = (const uint8_t*)buf;
   116                                  ; #ifdef __SSE4_2__
   117                                  ; 	// SSE 4.2 CRC32
   118                                  ; 	for (size_t i = 0; i < (len / sizeof(uint32_t)); ++i) {
   119                                  ; 		hash = _mm_crc32_u32(hash, *(const uint32_t*)str);
   120                                  ; 		str += sizeof(uint32_t);
   121                                  ; 	}
   122                                  ; 	if (len & sizeof(uint16_t)) {
   123                                  ; 		hash = _mm_crc32_u16(hash, *(const uint16_t*)str);
   124                                  ; 		str += sizeof(uint16_t);
   125                                  ; 	}
   126                                  ; 	if (len & sizeof(uint8_t)) {
   127                                  ; 		hash = _mm_crc32_u8(hash, *(const uint8_t*)str);
   128                                  ; 	}
   129                                  ; #else
   130                                  ; 	// Classic DJB hash
   131                                  ; 	for (size_t i = 0; i < len; ++i) {
   132                                  ; 		hash = (hash << 5) + hash + str[i];
   133                                  ; 	}
   134                                  ; #endif
   135                                  ; 	return hash;
   136                                  ; }
   137                                  
   138                                  ;================================================
   139                                  
   140                                  section .data 
   141                                  
   142                                  crc32_look_up: 
   175 00000000 0000000003836BF2F7-      dd 0x00000000, 0xF26B8303, 0xE13B70F7, 0x1350F3F4, 0xC79A971F, 0x35F1141C, 0x26A1E7E8, 0xD4CA64EB, 	0x8AD958CF, 0x78B2DBCC, 0x6BE22838, 0x9989AB3B, 0x4D43CFD0, 0xBF284CD3, 0xAC78BF27, 0x5E133C24, 	0x105EC76F, 0xE235446C, 0xF165B798, 0x030E349B, 0xD7C4507
   175 00000009 703BE1F4F350131F97-
   175 00000012 9AC71C14F135E8E7A1-
   175 0000001B 26EB64CAD4CF58D98A-
   175 00000024 CCDBB2783828E26B3B-
   175 0000002D AB8999D0CF434DD34C-
   175 00000036 28BF27BF78AC243C13-
   175 0000003F 5E6FC75E106C4435E2-
   175 00000048 98B765F19B340E0370-
   175 00000051 50C4D773D3AF258720-
   175 0000005A FF3684A394C4A09F87-
   175 00000063 9AA31CEC6857EFBC7B-
   175 0000006C 546CD789BF081D5DBC-
   175 00000075 8B76AF487826BC4BFB-
   175 0000007E 4D4EDE8EBD20DD0DD6-
   175 00000087 D229FE86C12A7DED33-
   175 00000090 C11927E7C29A4C1536-
   175 00000099 691C0635EA77F411D6-
   175 000000A2 64AA12550F58E6A65F-
   175 000000AB 4BE52534B90E41FE6D-
   175 000000B4 0DC2959FF931C58CFA-
   175 000000BD B2AE7EB149E330B2CA-
   175 000000C6 88C24639D8D145BAB3-
   175 000000CF 23AEDE79F7AD5D1205-
   175 000000D8 59AE42165A2D29E47E-
   175 000000E1 113ABA7D9251488961-
   175 000000EA 015B8AE26AA96186A0-
   175 000000F3 7D6205CB8F96F69B9C-
   175 000000FC 9575F06EBC1D7B41BF-
   175 00000105 9E10B34B6D40A048EE-
   175 0000010E 2B52A38AE186A0098A-
   175 00000117 7454FADA675779B195-
   175 00000120 7345A2CB70C6C93984-
   175 00000129 35992A87B6F2D86CD2-
   175 00000132 380C6F5153FE9BA203-
   175 0000013B ED9821681FD3DA2551-
   175 00000144 D0594EA324AA1EB027-
   175 0000014D 297542CC4DBF96CFCE-
   175 00000156 D4643B3D847738BEEF-
   175 0000015F 851C82FCDB1F019729-
   175 00000168 EBF2C73AE871ACC803-
   175 00000171 15661C00960DEEF465-
   175 0000017A 5DFDF7E6360F6293C6-
   175 00000183 616110AD9395E3FD80-
   175 0000018C 966096727D045CA67E-
   175 00000195 8737548A74674789F7-
   175 0000019E 0CB5ADCB1FEBAE4874-
   175 000001A7 195ABB240A59384FF8-
   175 000001B0 B25C852CB1DFEEDE45-
   175 000001B9 2CBECD46AFD53F0D54-
   175 000001C2 98710ED7F383FA24A3-
   175 000001CB 90F9A7C86212C302B6-
   175 000001D4 11406944E5B33957E6-
   175 000001DD 3052A5C20C41FBC18F-
   175 000001E6 2A09357C7A1A36FF11-
   175 000001EF E8DD9BDB3CDE18B0CE-
   175 000001F8 2AEBE0DD29688B2F78-
   175 00000201 3BF6827BB89D708F4B-
   175 0000020A CD638CC8A69167AC6C-
   175 00000213 45642F07B790DC57A4-
   175 0000021C 935F3C56B7632F08B4-
   175 00000225 E044FA401314E94390-
   175 0000022E 7F1BA8F4B5CFAB77DE-
   175 00000237 3D5F848E2E5C07E5DC-
   175 00000240 17FCA892147FC360E0-
   175 00000249 8C9373E30FF881086B-
   175 00000252 32550BE859A7FF1B09-
   175 0000025B B4FC986246D8A47118-
   175 00000264 DB271AEA2FD44AF92C-
   175 0000026D 57210BC733EBDFC4B0-
   175 00000276 802D3043D03E33C0BB-
   175 0000027F CCA6B54BA2A5362050-
   175 00000288 51C5704352461BB1B9-
   175 00000291 22D165BAA1BA974E52-
   175 0000029A EA844DD1817669ED92-
   175 000002A3 286A6EF9DA9E9DA9C9-
   175 000002AC 9D1EC23B767A08EF75-
   175 000002B5 F9631D810A330E8289-
   175 000002BE 58FCC97215B2CAF17E-
   175 000002C7 403E022E533D8145A1-
   175 000002D0 D6E58F75D566E48721-
   175 000002D9 95B4942216DF66062A-
   175 000002E2 CC3805A9A7CAF15AF7-
   175 000002EB D9F2D99C2B19BD56FF-
   175 000002F4 1A3E3D0DEECD6D1EED-
   175 000002FD 4E06ECC4268DC3C7A5-
   175 00000306 E6313356B62230D5DD-
   175 0000030F D0DBB11704D8327CF6-
   175 00000318 2CC12CE52F4247170B-
   175 00000321 7E544908FD3FBBFC0E-
   175 0000032A 6FA8FF8D045A14E9CE-
   175 00000333 8E176AA57CE399F56F-
   175 0000033C E01A9E9DABE1D3D3A8-
   175 00000345 62B8215C91E8325F12-
   175 0000034E 83C0B4764914B7F522-
   175 00000357 E6430672F540851907-
   175 00000360 64B90A59673A61AB93-
   175 00000369 C931B8904A5A4A7B2E-
   175 00000372 909E78ADFB6C8C5EAB-
   175 0000037B 7F8FDDC08D1AA830E3-
   175 00000384 192B5B11EDD80B02EE-
   175 0000038D 5B60F0053FAA2406BC-
   175 00000396 C1D6F24F91C5F1CCFA-
   175 0000039F 37D5F0E969D673829B-
   175 000003A8 2280D2882103B97ACA-
   175 000003B1 6773AEC9E4185C3D17-
   175 000003BA 484F3E9423BD756F6E-
   175 000003C3 F376EC0501821F5512-
   175 000003CC 819C3EE06AF8F43469-
   175 000003D5 7B9FC69D88CFD59E0B-
   175 000003DE A427BA37B779B9B4DC-
   175 000003E7 8B4D478C984EC4E76A-
   175 000003F0 A5A02DBEA623464C52-
   175 000003F9 D0165F51537DAD     
   176                                  ;================================================ 
